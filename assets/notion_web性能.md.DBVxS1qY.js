import{_ as i,c as a,o as e,a as t}from"./app.Bkfc0Ku9.js";const l="/blog/assets/fa9874892d6f5b7f6181f2641711216f.DvKUEccv.png",n="/blog/assets/0001b1e669fee8f11eea55884ecfb5fc.Bhu4paZu.png",r="/blog/assets/31ca27a1ac11600f9f5e829f4caf09e9.XtHn8VLU.awebp",p="/blog/assets/ce202728005b77c74d798b6f7f0d1d6a.CTXDt7l0.awebp",h="/blog/assets/57c7f256edb68884f48a628be949bec0.1IBntYC_.png",o="/blog/assets/05dfd82adcaa7ab4461fafe06af1d66e.D91Riam4.png",d="/blog/assets/000fb2e4df01ea324b9e84a669d0f541.CWIfjz-x.png",k="/blog/assets/097d43f0d5fba0f9d6ac80ac0902c024.C5ELuf6f.png",c="/blog/assets/0391194bf88f060b5910950a8127abdb.BFtmUGkk.webp",E="/blog/assets/0d939042a049978a92fa97e3c0d33e31.DH3OhM3i.png",g="/blog/assets/299da2da27b1f103f2d3af54560ce8ca.DUtoI5Ig.png",q=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"notion/web性能.md","filePath":"notion/web性能.md","lastUpdated":1754363624000}'),b={name:"notion/web性能.md"};function u(y,s,m,f,F,C){return e(),a("div",null,s[0]||(s[0]=[t('<blockquote><p>web性能是对网站或应用程序的客观度量和用户的体验，有以下主要方面</p></blockquote><ol><li>减少总体负载时间</li><li>尽快使网站可用： 网站从开始加载，到达到可用状态为止所需的时间被称为<a href="https://developer.mozilla.org/en-US/docs/Glossary/Time_to_interactive" target="_blank" rel="noreferrer">交互等待时间</a></li><li>流畅性和交互性</li><li>感知性能</li><li>性能测量</li><li>找出未使用的js和css</li></ol><h2 id="覆盖率-找出未使用的-javascript-和-css" tabindex="-1">覆盖率：找出未使用的 JavaScript 和 CSS <a class="header-anchor" href="#覆盖率-找出未使用的-javascript-和-css" aria-label="Permalink to &quot;覆盖率：找出未使用的 JavaScript 和 CSS&quot;">​</a></h2><p>Chrome 开发者工具中的 <strong>Coverage</strong> 面板可以帮助您找到未使用的 JavaScript 和 CSS 代码。移除未使用的代码可以加快网页加载速度，并节省用户的移动数据流量。</p><p><img src="'+l+'" alt="analyzing-code-coverage.png" loading="lazy"></p><h2 id="记录代码覆盖率" tabindex="-1">记录代码覆盖率 <a class="header-anchor" href="#记录代码覆盖率" aria-label="Permalink to &quot;记录代码覆盖率&quot;">​</a></h2><p>若要捕获代码覆盖率，请执行以下操作：</p><ol><li>如需设置覆盖率范围，请在<strong>覆盖率</strong>面板顶部的操作栏中，从下拉列表中选择<strong>按函数</strong>或<strong>按块</strong>。</li><li>如需开始录制，请点击刷新 <strong>Start instrumenting 覆盖率并重新加载页面</strong> <strong>Coverage</strong> 面板会重新加载页面、捕获加载页面所需的代码，并在您与页面互动时继续录制。</li><li>如需停止记录代码覆盖率，请点击 stop_circle <strong>停止检测覆盖率并显示结果</strong>。</li></ol><h2 id="分析代码覆盖率" tabindex="-1">分析代码覆盖率 <a class="header-anchor" href="#分析代码覆盖率" aria-label="Permalink to &quot;分析代码覆盖率&quot;">​</a></h2><p><strong>覆盖率</strong>面板中的表格显示了分析了哪些资源以及每项资源使用了多少代码。</p><p>点击某一行即可在<strong>来源</strong>面板中打开该资源，并查看已使用代码和未使用的代码逐行细分。所有未使用的代码行都会用红线标记，列旁边会显示行号。</p><p><img src="'+n+'" alt="code-coverage-report.png" loading="lazy"></p><ul><li><strong>网址</strong>列是所分析资源的网址。</li><li><strong>Type</strong> 列显示资源是包含 CSS 和/或 JavaScript。</li><li><strong>Total Bytes</strong> 列是资源的总大小（以字节为单位）。</li><li><strong>Unused Bytes</strong> 列是未使用的字节数。</li><li>最后一个未命名的列是直观显示 <strong>Total Bytes</strong> 和 <strong>Unused Bytes</strong> 列。竖条的红色部分是未使用的字节。灰色部分使用字节。</li></ul><h2 id="如何消除阻塞渲染的脚本" tabindex="-1">如何消除阻塞渲染的脚本 <a class="header-anchor" href="#如何消除阻塞渲染的脚本" aria-label="Permalink to &quot;如何消除阻塞渲染的脚本&quot;">​</a></h2><p>确定关键代码后，请将该代码从阻止呈现的网址移到 HTML 网页中的内嵌 <code>script</code> 标记。网页加载时，该网页将具备处理网页核心功能所需的数据。</p><p>如果阻止呈现的网址中包含不重要的代码，您可以将其保留在网址中，然后使用 <code>async</code> 或 <code>defer</code> 属性标记该网址（另请参阅<a href="https://web.dev/articles/critical-rendering-path/adding-interactivity-with-javascript?hl=zh-cn" target="_blank" rel="noreferrer">使用 JavaScript 添加互动</a>）。</p><p>应移除完全未使用的代码（请参阅<a href="https://web.dev/articles/remove-unused-code?hl=zh-cn" target="_blank" rel="noreferrer">移除未使用的代码</a>）。</p><h2 id="如何消除阻塞渲染的样式表" tabindex="-1">如何消除阻塞渲染的样式表 <a class="header-anchor" href="#如何消除阻塞渲染的样式表" aria-label="Permalink to &quot;如何消除阻塞渲染的样式表&quot;">​</a></h2><p>与 <code>&lt;script&gt;</code> 标记中的内嵌代码类似，在 HTML 页面 <code>head</code> 的 <code>&lt;style&gt;</code> 代码块内，首次绘制所需的内嵌关键样式。然后，使用 <code>preload</code> 链接异步加载其余样式（请参阅<a href="https://web.dev/articles/defer-non-critical-css?hl=zh-cn" target="_blank" rel="noreferrer">推迟未使用的 CSS</a>）。</p><p>请考虑使用<a href="https://github.com/addyosmani/critical/blob/master/README.md" target="_blank" rel="noreferrer">关键工具</a>自动执行提取和内嵌“首屏”CSS 的过程。</p><p>另一种消除阻塞渲染的样式的方法是将这些样式拆分成不同的文件，按媒体查询进行整理。然后为每个样式表链接添加媒体属性。 加载网页时，浏览器只会阻止首次绘制以检索与用户的设备匹配的样式表（请参阅<a href="https://web.dev/articles/critical-rendering-path/render-blocking-css?hl=zh-cn" target="_blank" rel="noreferrer">阻塞渲染的 CSS</a>）。</p><p>最后，您需要缩减 CSS 的大小，以移除所有多余的空格或字符（请参阅<a href="https://web.dev/articles/minify-css?hl=zh-cn" target="_blank" rel="noreferrer">缩减 CSS 大小</a>）。 这可确保向用户发送最小的 bundle。</p><h2 id="阻塞渲染的css" tabindex="-1">阻塞渲染的Css <a class="header-anchor" href="#阻塞渲染的css" aria-label="Permalink to &quot;阻塞渲染的Css&quot;">​</a></h2><ul><li>默认情况下，CSS 被视为阻塞渲染的资源。</li><li>通过媒体类型和媒体查询，我们可以将一些 CSS 资源标记为不阻塞渲染。</li><li>浏览器会下载所有 CSS 资源（无论阻塞行为还是非阻塞行为）。</li></ul><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;style.css&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;stylesheet&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;style.css&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;stylesheet&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> media</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;all&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;portrait.css&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;stylesheet&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> media</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;orientation:portrait&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;print.css&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;stylesheet&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> media</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;print&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>第一个声明是阻塞渲染，在所有条件中都匹配。</li><li>第二个声明也是阻塞渲染：“all”是默认类型，因此，如果您不指定任何类型，系统会将其隐式设置为“all”。因此，第一个声明和第二个声明实际上是等效的。</li><li>第三个声明具有动态媒体查询，系统会在网页加载时计算该查询。根据网页加载时设备的屏幕方向，portrait.css 可能阻塞渲染，也可能不阻塞渲染。</li><li>最后一个声明仅在打印网页时应用，因此网页首次在浏览器中加载时，它不会阻塞渲染。</li></ul><h2 id="脚本执行以及async和defer" tabindex="-1">脚本执行以及async和defer <a class="header-anchor" href="#脚本执行以及async和defer" aria-label="Permalink to &quot;脚本执行以及async和defer&quot;">​</a></h2><blockquote><p>script本就是一个宏任务，因此执行时会阻塞js引擎，但是js引擎又是和GUI渲染引擎相斥的，所以会阻塞html解析，当下载完js脚本，会依次执行宏任务中的代码，执行完成之后，进入下一个宏任务，也就是下载下一个script中的脚本文件，依次执行</p></blockquote><p>async 和 defer</p><h3 id="head-标签中的-script-使用-async" tabindex="-1"><code>head</code> 标签中的 <code>script</code> 使用 async <a class="header-anchor" href="#head-标签中的-script-使用-async" aria-label="Permalink to &quot;`head` 标签中的 `script` 使用 async&quot;">​</a></h3><p>下面是一个页面使用 <code>async</code> 加载脚本，并将其放在 head 标签中：</p><p><img src="'+r+'" alt="image" loading="lazy"></p><p>脚本以异步的方式获取，获取脚本后，HTML 解析会暂停转而去执行 script 脚本，脚本执行完成后才会恢复 HTML 的解析。</p><h3 id="head-标签中的-script-使用-defer" tabindex="-1"><code>head</code> 标签中的 <code>script</code> 使用 defer <a class="header-anchor" href="#head-标签中的-script-使用-defer" aria-label="Permalink to &quot;`head` 标签中的 `script` 使用 defer&quot;">​</a></h3><p>下面是一个页面使用 <code>defer</code> 加载脚本，并将其放在 head 标签中：</p><p><img src="'+p+`" alt="image" loading="lazy"></p><p>脚本是异步获取的，只有在 HTML 解析完成后才会执行。</p><p>作者：夏影_July链接：<a href="https://juejin.cn/post/7333937659838627892%E6%9D%A5%E6%BA%90%EF%BC%9A%E7%A8%80%E5%9C%9F%E6%8E%98%E9%87%91%E8%91%97%E4%BD%9C%E6%9D%83%E5%BD%92%E4%BD%9C%E8%80%85%E6%89%80%E6%9C%89%E3%80%82%E5%95%86%E4%B8%9A%E8%BD%AC%E8%BD%BD%E8%AF%B7%E8%81%94%E7%B3%BB%E4%BD%9C%E8%80%85%E8%8E%B7%E5%BE%97%E6%8E%88%E6%9D%83%EF%BC%8C%E9%9D%9E%E5%95%86%E4%B8%9A%E8%BD%AC%E8%BD%BD%E8%AF%B7%E6%B3%A8%E6%98%8E%E5%87%BA%E5%A4%84%E3%80%82" target="_blank" rel="noreferrer">https://juejin.cn/post/7333937659838627892来源：稀土掘金著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</a></p><h2 id="preload和prefetch" tabindex="-1">preload和prefetch <a class="header-anchor" href="#preload和prefetch" aria-label="Permalink to &quot;preload和prefetch&quot;">​</a></h2><p><strong>注：preload只能在head中使用，参考body-ok规范</strong></p><p><strong>preload 提前加载</strong></p><blockquote><p>Preload主要是让浏览器提前加载资源（加载后并不会立即执行），然后会在需要执行的时候执行。并且 onload 事件必须等页面所有资源都加载完成才触发，而当给某个资源加上 preload 后，该资源将不会阻塞 onload。</p></blockquote><p><strong>prefetch 预判加载</strong></p><blockquote><p>preload 用于提前加载用于当前页面的资源，而 prefetch 则是用于加载未来（比如下一个页面）会用到的资源，并且告诉浏览器在空闲的时候去下载，它会将下载资源的优先级降到最低。</p></blockquote><p>使用值为 <code>preload</code> 的 <code>rel</code> 属性，这会将 <code>&lt;link&gt;</code> 标签转变成任何我们想要的资源的预加载器。你还需要指定：</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/link#href" target="_blank" rel="noreferrer"><code>href</code></a> 属性中的资源路径。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/link#as" target="_blank" rel="noreferrer"><code>as</code></a> 属性中的资源类型。</li></ul><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> charset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;utf-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;JS and CSS preload example&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;preload&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;style.css&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;style&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;preload&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;main.js&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;script&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;stylesheet&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;style.css&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;bouncing balls&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">canvas</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">canvas</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;main.js&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>在预加载启用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS" target="_blank" rel="noreferrer">CORS</a> 的资源（例如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/fetch" target="_blank" rel="noreferrer"><code>fetch()</code></a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest" target="_blank" rel="noreferrer"><code>XMLHttpRequest</code></a> 或<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/@font-face" target="_blank" rel="noreferrer">字体</a>）时，需要特别注意在你的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/link" target="_blank" rel="noreferrer"><code>&lt;link&gt;</code></a> 元素上设置 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/link#crossorigin" target="_blank" rel="noreferrer"><code>crossorigin</code></a> 属性。该属性需要设置为与资源的 CORS 和凭据模式相匹配，即使获取请求不跨域也需要设置。</p><p>优点：</p><ul><li><p>预加载我们的 CSS 和 JavaScript 文件，以便它们在稍后渲染页面时立即可用</p></li><li><p>可以使用脚本来执行它们</p><p><em>例如，这里我们创建一个</em> <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement" target="_blank" rel="noreferrer"><em><code>HTMLLinkElement</code></em></a> <em>实例，然后将其附加到 DOM 中：</em></p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> preloadLink</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;link&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">preloadLink.href </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;myscript.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">preloadLink.rel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;preload&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">preloadLink.as </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;script&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.head.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(preloadLink);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><em>这意味着浏览器将预加载</em> <em><code>myscript.js</code></em> <em>文件，但实际上还没有使用它。要使用它，你可以这样做：</em></p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> preloadedScript</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;script&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">preloadedScript.src </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;myscript.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.body.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(preloadedScript);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>当你想要预加载一个脚本，但需要将执行推迟到确切需要它的时候，这很有用</p></li></ul><h3 id="什么类型的内容可以被预加载" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Attributes/rel/preload#%E4%BB%80%E4%B9%88%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%86%85%E5%AE%B9%E5%8F%AF%E4%BB%A5%E8%A2%AB%E9%A2%84%E5%8A%A0%E8%BD%BD%EF%BC%9F" target="_blank" rel="noreferrer">什么类型的内容可以被预加载？</a> <a class="header-anchor" href="#什么类型的内容可以被预加载" aria-label="Permalink to &quot;[什么类型的内容可以被预加载？](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Attributes/rel/preload#%E4%BB%80%E4%B9%88%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%86%85%E5%AE%B9%E5%8F%AF%E4%BB%A5%E8%A2%AB%E9%A2%84%E5%8A%A0%E8%BD%BD%EF%BC%9F)&quot;">​</a></h3><p>可以预加载多种类型的内容。<code>as</code> 属性可能的值包括：</p><ul><li><code>audio</code>：音频文件，通常在 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/audio" target="_blank" rel="noreferrer"><code>&lt;audio&gt;</code></a> 中使用。</li><li><code>document</code>：用于嵌入在 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/frame" target="_blank" rel="noreferrer"><code>&lt;frame&gt;</code></a> 或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/iframe" target="_blank" rel="noreferrer"><code>&lt;iframe&gt;</code></a> 中的 HTML 文档。</li><li><code>embed</code>：用于嵌入在 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/embed" target="_blank" rel="noreferrer"><code>&lt;embed&gt;</code></a> 元素中的资源。</li><li><code>fetch</code>：通过 fetch 或 XHR 请求访问的资源，例如 ArrayBuffer、WebAssembly 二进制文件或 JSON 文件。</li><li><code>font</code>：字体文件。</li><li><code>image</code>：图像文件。</li><li><code>object</code>：要嵌入在 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/object" target="_blank" rel="noreferrer"><code>&lt;object&gt;</code></a> 元素中的资源。</li><li><code>script</code>：JavaScript 文件。</li><li><code>style</code>：CSS 样式表。</li><li><code>track</code>：WebVTT 文件。</li><li><code>worker</code>：JavaScript web worker 或 shared worker。</li><li><code>video</code>：视频文件，通常在 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/video" target="_blank" rel="noreferrer"><code>&lt;video&gt;</code></a> 中使用。</li></ul><h2 id="其他资源预加载机制" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Attributes/rel/preload#%E5%85%B6%E4%BB%96%E8%B5%84%E6%BA%90%E9%A2%84%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6" target="_blank" rel="noreferrer">其他资源预加载机制</a> <a class="header-anchor" href="#其他资源预加载机制" aria-label="Permalink to &quot;[其他资源预加载机制](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Attributes/rel/preload#%E5%85%B6%E4%BB%96%E8%B5%84%E6%BA%90%E9%A2%84%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6)&quot;">​</a></h2><p>还存在其他预加载特性，但都不如 <code>&lt;link rel=&quot;preload&quot;&gt;</code> 适合该目的：</p><ul><li><p><code>&lt;link rel=&quot;prefetch&quot;&gt;</code> 在浏览器中支持已久，但它是用于预取将在下一次导航/页面加载时使用的资源（例如，当你跳转到下一页时）。这是可以的，但对于当前页面没有用！此外，浏览器会给预取（<code>prefetch</code>）的资源比预加载（<code>preload</code>）的资源更低的优先级——当前页面比下一页更重要。有关更多详细信息，请参阅<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Prefetch" target="_blank" rel="noreferrer">预取</a>。</p></li><li><p><code>&lt;link rel=&quot;prerender&quot;&gt;</code> 在后台渲染指定的网页，如果用户导航到该页面，可以加速其加载。由于有可能浪费用户的带宽，Chrome 将 <code>prerender</code> 视为 <a href="https://developer.chrome.com/blog/nostate-prefetch/" target="_blank" rel="noreferrer">NoState 预取</a>。</p></li><li><p><code>&lt;link rel=&quot;subresource&quot;&gt;</code>  一段时间以前在 Chrome 中得到了支持，其目的是解决与 <code>preload</code> 相同的问题，但它存在一个问题：没有办法确定项目的优先级（<code>as</code> 当时还不存在），所以它们都是以相当低的优先级获取的。</p><p>非标准</p></li><li><p>有许多基于脚本的资源加载器，但它们无法控制浏览器的获取优先级队列，并面临着同样的性能问题。</p></li></ul><h2 id="nostate" tabindex="-1"><strong>NoState</strong> <a class="header-anchor" href="#nostate" aria-label="Permalink to &quot;**NoState**&quot;">​</a></h2><p>引入 NoState 预提取主要有以下两个动机：</p><p><strong>减少内存用量</strong></p><pre><code>- **NoState 预提取仅使用约 45MiB 的内存**。维护预加载扫描程序是 NoState 预提取的主要内存开销，在不同用例中，此开销保持相对稳定。增加提取大小或提取量对 NoState 预提取消耗的内存量不会产生显著影响。
- 相比之下，**预渲染通常消耗 100MiB 的内存，内存消耗上限为 150MiB**。这种高内存消耗使其不适合低端（即 RAM 小于 512MB）的设备。因此，Chrome 不会在低端设备上进行预渲染，而是[预连接](https://www.w3.org/TR/resource-hints/#dfn-preconnect)。
</code></pre><p><strong>为新的 Web 平台功能提供支持</strong></p><pre><code>- 通过预渲染，不应面向用户（例如播放音乐或视频）或执行有状态的操作（例如更改会话或本地存储空间）。不过，阻止在呈现网页时执行这些操作可能既困难又复杂。NoState 预提取只会提前提取资源，而不会执行代码或呈现网页。这样可以更轻松地防止发生面向用户的有状态操作。
</code></pre><h2 id="相关使用" tabindex="-1">相关使用 <a class="header-anchor" href="#相关使用" aria-label="Permalink to &quot;相关使用&quot;">​</a></h2><p>webpack的懒加载机制</p><p><s><strong>使用prefetch结合webpackChunkName组件打包名称，当浏览器空闲时加载资源，加载路由对应的组件时解析文件，并执行代码</strong></s></p><h2 id="性能指标" tabindex="-1">性能指标 <a class="header-anchor" href="#性能指标" aria-label="Permalink to &quot;性能指标&quot;">​</a></h2><blockquote><p>💡 <strong>读懂前端「性能优化」</strong><br><a href="https://tech.qimao.com/yi-wen-du-dong-qian-duan-xing-neng-you-hua/" target="_blank" rel="noreferrer">https://tech.qimao.com/yi-wen-du-dong-qian-duan-xing-neng-you-hua/</a></p></blockquote><blockquote><p>💡 <strong>写给中高级前端关于性能优化的9大策略和6大指标</strong><br><a href="https://cloud.tencent.com/developer/article/2070655" target="_blank" rel="noreferrer">https://cloud.tencent.com/developer/article/2070655</a></p></blockquote><ul><li><p><strong>FP (First Paint) 首次绘制</strong></p><p>标记浏览器渲染任何在视觉上不同于导航前屏幕内容之内容的时间点。</p></li><li><p><strong>FCP (First Contentful Paint) 首次内容绘制</strong></p><p>标记浏览器渲染来自 DOM 第一位内容的时间点，该内容可能是文本、图像、SVG 甚至 元素。</p><pre><code>  ![FCP.png](/notion/images/4acfdf22eb63b61bcfd8fb548d30f307.png)
</code></pre></li><li><p><strong>LCP (Largest Contentful Paint) 最大内容渲染</strong></p><p>衡量viewport内可见的最大内容元素的渲染时间。元素包括img、video、div及其他块级元素。</p><p>LCP的数据会通过PerformanceEntry对象记录, 每次出现更大的内容渲染, 则会产生一个新的PerformanceEntry对象.(2019年11月新增)。</p><p><img src="`+h+'" alt="LCP-1.png" loading="lazy"></p><p>根据google建议，为了给用户提供更好的产品体验，LCP应该低于2.5s。</p></li></ul><p><img src="'+o+'" alt="LCP-2.png" loading="lazy"></p><ul><li><p><strong>DCL (DomContentloaded)</strong></p><p>当 HTML 文档被完全加载和解析完成之后，DOMContentLoaded 事件被触发，无需等待样式表、图像和子框架的完成加载。</p></li><li><p><strong>FMP(First Meaningful Paint) 首次有效绘制</strong></p><p>页面主角元素的首次有效绘制。例如，在 bilibili 上，主角元素就是视频元素；微博的博文是主要元素。</p></li><li><p><strong>L (onLoad)</strong></p><p>页面的onLoad时的时间点。当依赖的资源, 全部加载完毕之后才会触发。</p></li><li><p><strong>TTI (Time to Interactive) 可交互时间</strong></p><p>用于标记应用已进行视觉渲染并能可靠响应用户输入的时间点。</p></li><li><p><strong>TBT (Total Blocking Time) 页面阻塞总时长</strong></p><p>TBT汇总所有加载过程中阻塞用户操作的时长，在FCP和TTI之间任何long task中阻塞部分都会被汇总。</p><p>来个例子说明一下:</p></li></ul><p><img src="'+d+`" alt="TBT-1.png" loading="lazy"></p><pre><code>上图，有三个长任务，两个短任务。
</code></pre><p><img src="`+k+`" alt="TBT-2.png" loading="lazy"></p><pre><code>在主线程上运行任务所花费的总时间为560毫秒，但TBT只有345(200 + 40 + 105)毫秒的时间，被     视为阻塞时间(超过50ms的Task都会被记录).
</code></pre><ul><li><p><strong>FID (First Input Delay) 首次输入延迟</strong></p><p>FID (First Input Delay) 首次输入延迟: 指标衡量的是从用户首次与您的网站进行交互（即当他们单击链接，点击按钮等）到浏览器实际能够访问之间的时间, 下面来张图来解释FID和TTI的区别:</p></li></ul><p><img src="`+c+`" alt="FID-1.webp" loading="lazy"></p><pre><code>根据google建议，为了给用户提供更好的产品体验，FID应该低于100ms。
</code></pre><p><img src="`+E+'" alt="FID-2.png" loading="lazy"></p><ul><li><p><strong>CLS (Cumulative Layout Shift) 累积布局偏移</strong></p><p>CLS (Cumulative Layout Shift) 累积布局偏移: 总结起来就是一个元素初始时和其hidden之间的任何时间如果元素偏移了, 则会被计算进去, 具体的计算方法可看这篇文章 <a href="https://web.dev/cls/%5D" target="_blank" rel="noreferrer">[https://web.dev/cls/]</a></p></li></ul><p><img src="'+g+'" alt="CLS.png" loading="lazy"></p><ul><li><p><strong>SI (Speed Index)</strong></p><p>SI (Speed Index): 指标用于显示页面可见部分的显示速度, 单位是时间,</p></li></ul><p>FP与FCP这两个指标之间的主要区别是：</p><ul><li>FP是当浏览器开始绘制内容到屏幕上的时候，只要在视觉上开始发生变化，无论是什么内容触发的视觉变化，在这一刻，这个时间点，叫做FP。</li><li>FCP指的是浏览器首次绘制来自DOM的内容。例如：文本，图片，SVG，canvas元素等，这个时间点叫FCP。</li></ul><p>dom:</p><p>js:</p><p>加载</p>',87)]))}const v=i(b,[["render",u]]);export{q as __pageData,v as default};
