import{_ as i,c as a,o as n,a2 as l}from"./chunks/framework.robbWsyO.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"notion/垃圾回收机制.md","filePath":"notion/垃圾回收机制.md","lastUpdated":1753782063000}'),e={name:"notion/垃圾回收机制.md"};function p(h,s,t,r,k,d){return n(),a("div",null,s[0]||(s[0]=[l(`<h3 id="谷歌浏览器的垃圾回收机制" tabindex="-1">谷歌浏览器的垃圾回收机制 <a class="header-anchor" href="#谷歌浏览器的垃圾回收机制" aria-label="Permalink to &quot;谷歌浏览器的垃圾回收机制&quot;">​</a></h3><p>谷歌浏览器（Chrome）使用的是 V8 JavaScript 引擎。V8 采用了<strong>分代垃圾回收机制</strong>（Generational Garbage Collection）和<strong>标记-清除算法</strong>（Mark-and-Sweep Algorithm）来管理内存。</p><h3 id="分代垃圾回收机制" tabindex="-1">分代垃圾回收机制 <a class="header-anchor" href="#分代垃圾回收机制" aria-label="Permalink to &quot;分代垃圾回收机制&quot;">​</a></h3><p>V8 将内存分为两个主要区域：<strong>新生代</strong>（New Space）和<strong>老生代</strong>（Old Space）。</p><ol><li><strong>新生代</strong>：用于存储生命周期较短的对象。新生代内存较小，且分为两个空间：From 空间和 To 空间。新生代垃圾回收主要使用 Scavenge 算法。</li><li><strong>老生代</strong>：用于存储生命周期较长的对象。老生代内存较大，垃圾回收采用标记-清除和标记-整理算法。</li></ol><h3 id="scavenge-算法-新生代" tabindex="-1">Scavenge 算法（新生代） <a class="header-anchor" href="#scavenge-算法-新生代" aria-label="Permalink to &quot;Scavenge 算法（新生代）&quot;">​</a></h3><ol><li>新生代内存分为 From 空间和 To 空间。</li><li>活跃对象保存在 From 空间，当 From 空间填满时，进行垃圾回收。</li><li>活跃对象被复制到 To 空间，非活跃对象被回收。</li><li>交换 From 和 To 空间的角色。</li></ol><h3 id="标记-清除和标记-整理算法-老生代" tabindex="-1">标记-清除和标记-整理算法（老生代） <a class="header-anchor" href="#标记-清除和标记-整理算法-老生代" aria-label="Permalink to &quot;标记-清除和标记-整理算法（老生代）&quot;">​</a></h3><ol><li><strong>标记阶段</strong>：从根对象出发，递归遍历并标记所有可达对象。</li><li><strong>清除阶段</strong>：遍历整个堆，回收未标记的对象。</li><li><strong>整理阶段</strong>（标记-整理）：对剩余活跃对象进行压缩，整理内存碎片。</li></ol><h3 id="循环引用的变量回收" tabindex="-1">循环引用的变量回收 <a class="header-anchor" href="#循环引用的变量回收" aria-label="Permalink to &quot;循环引用的变量回收&quot;">​</a></h3><p>在 JavaScript 中，循环引用是指两个或多个对象相互引用，形成一个闭环。比如：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createCycle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  obj1.reference </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj2;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  obj2.reference </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj1;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [obj1, obj2];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>虽然 <code>obj1</code> 和 <code>obj2</code> 之间存在循环引用，但它们可以在适当的条件下被垃圾回收器回收。因为现代垃圾回收器使用了<strong>标记-清除算法</strong>，这意味着只要这些对象在根对象（如全局对象、当前执行上下文中的局部变量等）不可达，它们就会被视为垃圾并被回收。</p><h3 id="标记-清除算法处理循环引用" tabindex="-1">标记-清除算法处理循环引用 <a class="header-anchor" href="#标记-清除算法处理循环引用" aria-label="Permalink to &quot;标记-清除算法处理循环引用&quot;">​</a></h3><ol><li><strong>标记阶段</strong>：从根对象出发，递归标记所有可达对象。即使存在循环引用，只要这些对象从根对象不可达，它们就不会被标记。</li><li><strong>清除阶段</strong>：未被标记的对象会被回收。</li></ol><p>在上面的例子中，如果 <code>createCycle</code> 函数执行完毕且返回的数组不再被引用（比如离开作用域或者数组本身被释放），<code>obj1</code> 和 <code>obj2</code> 就会变得不可达，因此会被标记为垃圾并最终被回收。</p><h3 id="垃圾回收示例" tabindex="-1">垃圾回收示例 <a class="header-anchor" href="#垃圾回收示例" aria-label="Permalink to &quot;垃圾回收示例&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createCycle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  obj1.reference </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj2;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  obj2.reference </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj1;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [obj1, obj2];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cycle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createCycle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// At this point, obj1 and obj2 are reachable through the cycle variable</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cycle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Now, obj1 and obj2 are no longer reachable and can be garbage collected</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>在上面的代码中，当 <code>cycle</code> 被设置为 <code>null</code> 时，<code>obj1</code> 和 <code>obj2</code> 的引用被切断，它们不再可达，因此垃圾回收器会在下次回收时回收它们。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>谷歌浏览器通过 V8 引擎的分代垃圾回收机制和标记-清除算法有效地管理内存，处理包括循环引用在内的各种情况。当对象之间存在循环引用时，只要这些对象从根对象不可达，它们仍然会被正确地标记为垃圾并被回收。</p><h2 id="根对象是指的什么" tabindex="-1">根对象是指的什么 <a class="header-anchor" href="#根对象是指的什么" aria-label="Permalink to &quot;根对象是指的什么&quot;">​</a></h2><p>在 JavaScript 中，垃圾回收器使用根对象（Root Objects）作为起点来识别哪些对象是可达的，哪些对象是不可达的。根对象是所有活动对象（那些还在使用中的对象）的起点。具体来说，根对象通常包括以下几种：</p><ol><li><p><strong>全局对象</strong>：在浏览器环境中，通常是 <code>window</code> 对象。在 Node.js 环境中，通常是 <code>global</code> 对象。全局对象上挂载的所有变量和属性都被视为根对象。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 浏览器环境</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> globalVar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;I&#39;m a global variable&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这是根对象的一部分</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p><strong>当前执行上下文中的局部变量</strong>：当前函数或作用域中的局部变量、参数等。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> example</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> localVar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;I&#39;m a local variable&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这是根对象的一部分</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // localVar 在函数执行期间是根对象的一部分</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p><strong>调用栈上的变量</strong>：所有当前调用栈中的函数调用所涉及的变量和参数。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fooVar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;foo variable&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> barVar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;bar variable&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // fooVar 和 barVar 都是根对象的一部分</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></li><li><p><strong>活动的闭包</strong>：所有由闭包捕获的变量。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> outer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> outerVar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;I&#39;m an outer variable&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> inner</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(outerVar); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// outerVar 是根对象的一部分，因为被 inner 闭包引用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> inner;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li></ol><h3 id="垃圾回收的标记-清除过程" tabindex="-1">垃圾回收的标记-清除过程 <a class="header-anchor" href="#垃圾回收的标记-清除过程" aria-label="Permalink to &quot;垃圾回收的标记-清除过程&quot;">​</a></h3><ol><li><strong>标记阶段</strong>：从根对象开始，递归遍历所有可达对象，并对这些对象进行标记。标记过程会追踪所有通过引用链可达的对象。</li><li><strong>清除阶段</strong>：遍历堆中的所有对象，回收那些未被标记的对象，即不可达对象。</li></ol><h3 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h3><p>下面是一个具体示例，展示哪些对象在垃圾回收过程中会被标记和清除：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 全局变量是根对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> globalVar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;global&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createCycle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> localVar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;local&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 局部变量在函数执行期间是根对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    obj1.reference </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj2;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    obj2.reference </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj1;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [obj1, obj2];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cycle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createCycle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// At this point, obj1 and obj2 are reachable through the cycle variable</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cycle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Now, obj1 and obj2 are no longer reachable and can be garbage collected</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="总结-1" tabindex="-1">总结 <a class="header-anchor" href="#总结-1" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>根对象（Root Objects）是垃圾回收器判断对象是否可达的起点。通过标记从根对象可达的所有对象，垃圾回收器可以识别出那些不再被引用的对象，并将其回收。理解根对象对于理解 JavaScript 的内存管理和垃圾回收机制至关重要。</p><h2 id="老生代回收的时机" tabindex="-1">老生代回收的时机 <a class="header-anchor" href="#老生代回收的时机" aria-label="Permalink to &quot;老生代回收的时机&quot;">​</a></h2><p>在 V8 引擎中，垃圾回收（GC）机制分为新生代（New Space）和老生代（Old Space），分别用于存储生命周期较短和较长的对象。老生代的垃圾回收机制相对复杂，通常涉及标记-清除（Mark-Sweep）和标记-整理（Mark-Compact）算法。以下是老生代垃圾回收的时机和相关机制的详细说明：</p><h3 id="老生代垃圾回收的时机" tabindex="-1">老生代垃圾回收的时机 <a class="header-anchor" href="#老生代垃圾回收的时机" aria-label="Permalink to &quot;老生代垃圾回收的时机&quot;">​</a></h3><p>老生代的垃圾回收不会像新生代那样频繁，而是根据以下几个条件触发：</p><ol><li><strong>老生代内存使用达到阈值</strong>：当老生代区域的内存使用达到一定的阈值时，会触发垃圾回收。这是为了避免内存耗尽，确保程序可以继续运行。</li><li><strong>系统内存不足</strong>：当系统检测到内存压力较大时，也可能会触发老生代的垃圾回收，尝试回收更多内存。</li><li><strong>显式调用</strong>：虽然不推荐，但开发者可以显式调用垃圾回收（如 <code>gc()</code>），在某些特定场景下可能会触发老生代的垃圾回收。不过，显式调用通常仅在调试或特殊情况下使用。</li></ol><h3 id="老生代的垃圾回收机制" tabindex="-1">老生代的垃圾回收机制 <a class="header-anchor" href="#老生代的垃圾回收机制" aria-label="Permalink to &quot;老生代的垃圾回收机制&quot;">​</a></h3><p>V8 引擎在老生代中主要采用两种垃圾回收算法：标记-清除（Mark-Sweep）和标记-整理（Mark-Compact）。</p><h3 id="标记-清除-mark-sweep" tabindex="-1">标记-清除（Mark-Sweep） <a class="header-anchor" href="#标记-清除-mark-sweep" aria-label="Permalink to &quot;标记-清除（Mark-Sweep）&quot;">​</a></h3><p>标记-清除是老生代回收的基本算法，分为两个阶段：</p><ol><li><strong>标记阶段</strong>：从根对象（如全局对象、当前执行上下文中的局部变量等）出发，递归遍历并标记所有可达对象。</li><li><strong>清除阶段</strong>：遍历堆中的所有对象，回收未被标记的对象，即不可达对象。这些未被标记的对象的内存会被释放，但堆中可能会留下内存碎片。</li></ol><h3 id="标记-整理-mark-compact" tabindex="-1">标记-整理（Mark-Compact） <a class="header-anchor" href="#标记-整理-mark-compact" aria-label="Permalink to &quot;标记-整理（Mark-Compact）&quot;">​</a></h3><p>为了应对标记-清除算法产生的内存碎片问题，V8 还使用了标记-整理算法：</p><ol><li><strong>标记阶段</strong>：与标记-清除算法相同，标记所有可达对象。</li><li><strong>整理阶段</strong>：移动所有活跃对象，使其在内存中连续，消除碎片。整理阶段会将存活对象移动到一起，并更新相关指针。</li></ol><h3 id="增量标记-incremental-marking" tabindex="-1">增量标记（Incremental Marking） <a class="header-anchor" href="#增量标记-incremental-marking" aria-label="Permalink to &quot;增量标记（Incremental Marking）&quot;">​</a></h3><p>为了减少垃圾回收带来的停顿时间（暂停应用程序执行），V8 还引入了增量标记技术。增量标记将标记阶段拆分为多个小步骤，交替进行垃圾回收和程序执行，以实现更低的延迟。</p><h3 id="示例-老生代垃圾回收" tabindex="-1">示例：老生代垃圾回收 <a class="header-anchor" href="#示例-老生代垃圾回收" aria-label="Permalink to &quot;示例：老生代垃圾回收&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createOldSpaceObjects</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        obj[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { largeData: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fill</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;*&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> oldSpaceObj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createOldSpaceObjects</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 此时，oldSpaceObj 持有大量数据，可能会被分配到老生代</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 模拟进一步的内存使用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">oldSpaceObj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 解除引用，触发老生代垃圾回收的条件</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>在上面的示例中，<code>createOldSpaceObjects</code> 函数创建了大量对象，这些对象可能会被分配到老生代。当解除对 <code>oldSpaceObj</code> 的引用时，这些对象变得不可达，符合老生代垃圾回收的条件。</p><h3 id="总结-2" tabindex="-1">总结 <a class="header-anchor" href="#总结-2" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>老生代垃圾回收在以下情况下会被触发：</p><ul><li>老生代内存使用达到阈值</li><li>系统内存不足</li><li>显式调用垃圾回收</li></ul><p>V8 采用了标记-清除和标记-整理算法，以及增量标记技术来高效地管理老生代的内存。这些机制共同作用，确保老生代内存的高效使用和回收，从而提升 JavaScript 应用程序的性能和稳定性。</p><h2 id="scavenge-算法" tabindex="-1">Scavenge 算法 <a class="header-anchor" href="#scavenge-算法" aria-label="Permalink to &quot;Scavenge 算法&quot;">​</a></h2><p>Scavenge 算法是一种用于新生代（Young Generation）内存管理的垃圾回收算法，特别适用于生命周期短、频繁创建和销毁的小对象。V8 引擎中的 Scavenge 算法实现被称为 <strong>“复制收集算法”</strong>（Copying Collection Algorithm）。以下是 Scavenge 算法的详细解释。</p><h3 id="scavenge-算法的工作原理" tabindex="-1">Scavenge 算法的工作原理 <a class="header-anchor" href="#scavenge-算法的工作原理" aria-label="Permalink to &quot;Scavenge 算法的工作原理&quot;">​</a></h3><p>新生代内存通常被划分为两个区域：<strong>From 空间</strong>和<strong>To 空间</strong>。这两个空间的大小相同，并且交替使用。</p><ol><li><strong>内存分配</strong>： <ul><li>新生代中的对象最初分配在 From 空间。</li><li>当 From 空间填满时，就会触发一次垃圾回收。</li></ul></li><li><strong>垃圾回收过程</strong>： <ul><li><strong>标记阶段</strong>：从根对象出发，标记所有可达对象。</li><li><strong>复制阶段</strong>：将所有标记的可达对象从 From 空间复制到 To 空间。</li><li><strong>清除阶段</strong>：清除 From 空间中的所有对象，因为未标记的对象即为不可达对象。</li></ul></li><li><strong>空间交换</strong>： <ul><li>经过上述步骤后，From 和 To 空间的角色互换。原来的 To 空间变为新的 From 空间，新的对象将在这个新的 From 空间中分配。</li></ul></li></ol><h3 id="scavenge-算法的优点" tabindex="-1">Scavenge 算法的优点 <a class="header-anchor" href="#scavenge-算法的优点" aria-label="Permalink to &quot;Scavenge 算法的优点&quot;">​</a></h3><ol><li><strong>高效的内存管理</strong>： <ul><li>Scavenge 算法通过复制存活对象来消除碎片，使内存分配连续且高效。</li></ul></li><li><strong>适用于新生代</strong>： <ul><li>新生代对象生命周期短，Scavenge 算法的高频率回收机制非常适合管理这些对象。</li></ul></li><li><strong>快速的垃圾回收</strong>： <ul><li>由于新生代内存较小，Scavenge 算法的标记和复制操作通常非常快，减少了应用程序的暂停时间。</li></ul></li></ol><h3 id="示例代码解释" tabindex="-1">示例代码解释 <a class="header-anchor" href="#示例代码解释" aria-label="Permalink to &quot;示例代码解释&quot;">​</a></h3><p>下面是一个简单的示例代码，展示了对象在新生代内存中的分配和回收：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createNewGenerationObjects</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newGenObjects </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    newGenObjects.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ data: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fill</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;*&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newGenObjects;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newGen </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createNewGenerationObjects</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// newGenObjects 数组中的对象会被分配到新生代内存（From 空间）中</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>在这个示例中，<code>createNewGenerationObjects</code> 函数创建了大量的小对象，这些对象会被分配到新生代内存中的 From 空间。当 From 空间填满时，Scavenge 算法会触发一次垃圾回收，将存活的对象复制到 To 空间，清除未标记的对象，并交换 From 和 To 空间。</p><h3 id="scavenge-算法的执行过程" tabindex="-1">Scavenge 算法的执行过程 <a class="header-anchor" href="#scavenge-算法的执行过程" aria-label="Permalink to &quot;Scavenge 算法的执行过程&quot;">​</a></h3><ol><li><strong>对象分配</strong>： <ul><li>新生代中的对象首先分配在 From 空间中。</li></ul></li><li><strong>触发垃圾回收</strong>： <ul><li>当 From 空间填满时，触发 Scavenge 算法进行垃圾回收。</li></ul></li><li><strong>标记和复制</strong>： <ul><li>从根对象出发，标记所有可达对象。</li><li>将标记的对象复制到 To 空间。</li></ul></li><li><strong>清除和交换</strong>： <ul><li>清除 From 空间中的所有对象。</li><li>交换 From 和 To 空间的角色。</li></ul></li></ol><h3 id="总结-3" tabindex="-1">总结 <a class="header-anchor" href="#总结-3" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>Scavenge 算法是一种高效的垃圾回收算法，特别适用于新生代内存管理。通过标记、复制和清除过程，Scavenge 算法能够快速回收生命周期短的小对象，并确保内存分配连续且高效。这种算法通过空间交换的方式消除内存碎片，提高了垃圾回收的效率和应用程序的性能。</p><h2 id="老生代的数据从哪来-怎么过来的" tabindex="-1">老生代的数据从哪来，怎么过来的 <a class="header-anchor" href="#老生代的数据从哪来-怎么过来的" aria-label="Permalink to &quot;老生代的数据从哪来，怎么过来的&quot;">​</a></h2><p>老生代（Old Generation）中的数据主要来自新生代（Young Generation）。新生代中的对象在一定条件下会被晋升（Promote）到老生代。以下是详细的解释：</p><h3 id="新生代和老生代" tabindex="-1">新生代和老生代 <a class="header-anchor" href="#新生代和老生代" aria-label="Permalink to &quot;新生代和老生代&quot;">​</a></h3><ol><li><strong>新生代</strong>（Young Generation）：存储生命周期较短的对象。 <ul><li>新生代内存较小，分为两个空间：From 空间和 To 空间。</li><li>使用 Scavenge 算法进行垃圾回收。</li></ul></li><li><strong>老生代</strong>（Old Generation）：存储生命周期较长的对象。 <ul><li>老生代内存较大。</li><li>使用标记-清除和标记-整理算法进行垃圾回收。</li></ul></li></ol><h3 id="对象晋升到老生代的条件" tabindex="-1">对象晋升到老生代的条件 <a class="header-anchor" href="#对象晋升到老生代的条件" aria-label="Permalink to &quot;对象晋升到老生代的条件&quot;">​</a></h3><p>当对象满足以下条件之一时，会被晋升到老生代：</p><ol><li><strong>对象经历过多次 Scavenge 回收</strong>： <ul><li>新生代内存分为两个空间（From 和 To），对象在一次垃圾回收后从 From 空间复制到 To 空间。若一个对象在多个垃圾回收周期后依然存活，会被晋升到老生代。</li></ul></li><li><strong>To 空间填满</strong>： <ul><li>如果 To 空间在一次垃圾回收过程中被填满，也会将对象直接晋升到老生代。</li></ul></li><li><strong>大对象</strong>： <ul><li>如果对象非常大，新生代无法容纳，则直接分配到老生代。</li></ul></li></ol><h3 id="晋升过程" tabindex="-1">晋升过程 <a class="header-anchor" href="#晋升过程" aria-label="Permalink to &quot;晋升过程&quot;">​</a></h3><ol><li><strong>对象分配和存活</strong>： <ul><li>新对象首先分配到新生代的 From 空间。</li><li>在垃圾回收过程中，存活对象被复制到 To 空间。</li><li>对象在多个垃圾回收周期后依然存活，达到晋升阈值。</li></ul></li><li><strong>触发晋升</strong>： <ul><li>对象在新生代内存中存活时间足够长，或者 To 空间填满。</li><li>对象被标记为需要晋升到老生代。</li></ul></li><li><strong>对象晋升</strong>： <ul><li>对象从新生代复制到老生代。</li></ul></li></ol><h3 id="示例代码和解释" tabindex="-1">示例代码和解释 <a class="header-anchor" href="#示例代码和解释" aria-label="Permalink to &quot;示例代码和解释&quot;">​</a></h3><p>下面是一个示例代码，展示对象从新生代晋升到老生代的过程：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createObjects</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newGenObjects </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        newGenObjects.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ data: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fill</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;*&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newGenObjects;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建新生代对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> objects </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createObjects</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 触发几次垃圾回收（模拟）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 对象在多个垃圾回收周期后依然存活，达到晋升条件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 触发垃圾回收</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    objects </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createObjects</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 解除引用，触发老生代垃圾回收的条件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">objects </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>在这个示例中，<code>createObjects</code> 函数创建了大量对象，这些对象最初会分配到新生代。通过多次触发垃圾回收（模拟），存活对象会在多个垃圾回收周期后晋升到老生代。当对象满足晋升条件时（如多次垃圾回收后依然存活），它们会被复制到老生代内存中。</p><h3 id="总结-4" tabindex="-1">总结 <a class="header-anchor" href="#总结-4" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>老生代中的数据主要来自新生代，晋升过程通常基于对象的生命周期和内存占用情况。V8 引擎通过一系列条件（如对象存活时间和新生代空间使用情况）来确定哪些对象需要晋升到老生代。晋升后的对象在老生代内存中进行管理，并使用标记-清除和标记-整理算法进行垃圾回收。这种机制确保了新生代和老生代的高效管理，从而提高了垃圾回收的性能和应用程序的运行效率。</p>`,83)]))}const E=i(e,[["render",p]]);export{c as __pageData,E as default};
