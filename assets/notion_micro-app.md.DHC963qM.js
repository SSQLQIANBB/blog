import{_ as i,c as a,o as n,a as e}from"./app.Cumm-wQi.js";const k=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"notion/micro-app.md","filePath":"notion/micro-app.md","lastUpdated":1754507625000}'),p={name:"notion/micro-app.md"};function l(o,s,t,d,r,h){return n(),a("div",null,s[0]||(s[0]=[e(`<p><a href="https://segmentfault.com/u/cangdu" target="_blank" rel="noreferrer">bookmark</a></p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// /src/sandbox.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SandBox</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 修改js作用域</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bindScope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">code</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	window.proxyWindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.proxyWindow</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`;(function(window, self){with(window){;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">code</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">n}}).call(window.proxyWindow, window.proxyWindow, window.proxyWindow);\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>在这段代码的执行过程中，属性的查找顺序会受到 JavaScript 作用域链和 <code>with</code> 语句的影响。下面详细解释执行时的属性查找顺序：</p><h3 id="with-语句的作用" tabindex="-1"><code>with</code> 语句的作用 <a class="header-anchor" href="#with-语句的作用" aria-label="Permalink to &quot;\`with\` 语句的作用&quot;">​</a></h3><p><code>with</code> 语句将一个对象的属性和方法临时添加到当前作用域链中。具体来说，在 <code>with(window)</code> 中，JavaScript 引擎会优先查找 <code>window</code> 对象上的属性和方法。</p><h3 id="执行顺序分析" tabindex="-1">执行顺序分析 <a class="header-anchor" href="#执行顺序分析" aria-label="Permalink to &quot;执行顺序分析&quot;">​</a></h3><h3 id="_1-设置-proxywindow" tabindex="-1">1. 设置 <code>proxyWindow</code> <a class="header-anchor" href="#_1-设置-proxywindow" aria-label="Permalink to &quot;1. 设置 \`proxyWindow\`&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.proxyWindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.proxyWindow;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这行代码将当前对象（<code>this</code>）的 <code>proxyWindow</code> 属性赋值给全局对象 <code>window</code> 的 <code>proxyWindow</code> 属性。这样，在全局作用域中可以通过 <code>window.proxyWindow</code> 访问 <code>this.proxyWindow</code>。</p><h3 id="_2-返回新的代码字符串" tabindex="-1">2. 返回新的代码字符串 <a class="header-anchor" href="#_2-返回新的代码字符串" aria-label="Permalink to &quot;2. 返回新的代码字符串&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`;(function(window, self){with(window){;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">code</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">n}}).call(window.proxyWindow, window.proxyWindow, window.proxyWindow);\`</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这个字符串是一个立即执行函数表达式（IIFE），并且会立即调用。</p><h3 id="_3-iife-的执行" tabindex="-1">3. IIFE 的执行 <a class="header-anchor" href="#_3-iife-的执行" aria-label="Permalink to &quot;3. IIFE 的执行&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(window) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ;\${code} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这里面执行所以子应用的js代码，所以子应用中访问window实际访问的是window.proxyWindow</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(window.proxyWindow, window.proxyWindow, window.proxyWindow);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这段代码会立即执行，其中 <code>window</code> 和 <code>self</code> 参数都被设置为 <code>window.proxyWindow</code>。以下是执行时的详细步骤：</p><ol><li><strong>IIFE 调用</strong>：<code>call(window.proxyWindow, window.proxyWindow, window.proxyWindow)</code> 会将 <code>this</code> 绑定到 <code>window.proxyWindow</code>，并将 <code>window</code> 和 <code>self</code> 参数设置为 <code>window.proxyWindow</code>。</li><li><strong><code>with</code></strong> <strong>语句</strong>：<code>with(window)</code> 会将 <code>window</code> 对象的属性和方法添加到当前作用域链的顶部。由于 <code>window</code> 参数是 <code>window.proxyWindow</code>，所以在 <code>with</code> 语句中，所有的属性查找首先会在 <code>window.proxyWindow</code> 中进行。</li></ol><h3 id="属性查找顺序" tabindex="-1">属性查找顺序 <a class="header-anchor" href="#属性查找顺序" aria-label="Permalink to &quot;属性查找顺序&quot;">​</a></h3><ol><li><strong><code>with(window)</code></strong> <strong>作用域</strong>：首先查找 <code>window.proxyWindow</code>（即当前 <code>with</code> 语句中的 <code>window</code>）上的属性。</li><li><strong>函数作用域</strong>：如果 <code>window.proxyWindow</code> 中没有找到，接下来会查找函数作用域内的变量和参数。</li><li><strong>全局作用域</strong>：如果函数作用域内也没有找到，则最后会查找全局作用域（<code>window</code> 对象）上的属性。</li></ol><h3 id="示例代码" tabindex="-1">示例代码 <a class="header-anchor" href="#示例代码" aria-label="Permalink to &quot;示例代码&quot;">​</a></h3><p>假设 <code>proxyWindow</code> 对象如下：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.proxyWindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">msg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Alert:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, msg);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  customProperty: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;customValue&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>传入的代码：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> code</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;alert(customProperty);&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boundCode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bindScope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(code);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">eval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(boundCode);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 执行绑定的代码</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>在执行 <code>eval(boundCode)</code> 时：</p><ol><li><code>alert(customProperty)</code> 会首先在 <code>window.proxyWindow</code> 对象上查找 <code>alert</code> 方法和 <code>customProperty</code> 属性。</li><li>找到 <code>proxyWindow.alert</code>，并调用它，同时找到 <code>proxyWindow.customProperty</code> 的值 <code>&#39;customValue&#39;</code>。</li></ol><p>最终输出：</p><div class="language-plain vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Alert: customValue</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>在 <code>bindScope</code> 生成的代码中，当执行传入的代码时，会按照以下顺序查找属性：</p><ol><li><strong><code>window.proxyWindow</code></strong> <strong>对象</strong>（即 <code>with(window)</code> 语句中的 <code>window</code> 参数）。</li><li><strong>函数作用域</strong>（当前 IIFE 内的局部变量和参数）。</li><li><strong>全局作用域</strong>（<code>window</code> 对象）。</li></ol><p>由于 <code>with</code> 语句的作用，代码会优先查找 <code>window.proxyWindow</code> 对象上的属性和方法，然后才会查找函数作用域和全局作用域。因此，执行时首先查找 <code>window.proxyWindow</code>（<code>this.proxyWindow</code>）上的属性。</p><h3 id="微前端框架-沙箱篇" tabindex="-1"><a href="https://segmentfault.com/a/1190000040455357" target="_blank" rel="noreferrer"><strong>微前端框架-沙箱篇</strong></a> <a class="header-anchor" href="#微前端框架-沙箱篇" aria-label="Permalink to &quot;[**微前端框架-沙箱篇**](https://segmentfault.com/a/1190000040455357)&quot;">​</a></h3><h3 id="微前端框架-数据通讯" tabindex="-1"><a href="https://github.com/micro-zoe/micro-app/issues/21" target="_blank" rel="noreferrer"><strong>微前端框架-数据通讯</strong></a> <a class="header-anchor" href="#微前端框架-数据通讯" aria-label="Permalink to &quot;[**微前端框架-数据通讯**](https://github.com/micro-zoe/micro-app/issues/21)&quot;">​</a></h3><h3 id="简易micro-app" tabindex="-1">简易micro-app <a class="header-anchor" href="#简易micro-app" aria-label="Permalink to &quot;简易micro-app&quot;">​</a></h3><p><a href="https://github.com/gaoshanshanshan/mini-micro-app/blob/main/readme.md" target="_blank" rel="noreferrer">https://github.com/gaoshanshanshan/mini-micro-app/blob/main/readme.md</a> 简易micro-app</p><p>生命周期</p>`,36)]))}const g=i(p,[["render",l]]);export{k as __pageData,g as default};
