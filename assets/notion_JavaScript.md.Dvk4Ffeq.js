import{_ as a,c as e,o as s,a2 as i}from"./chunks/framework.robbWsyO.js";const n="/blog/assets/998b1f85b3cc1d9acc852e2611260d99.BYQypE9x.png",l="/blog/assets/3c4004a017ebf34ada31bc8e52a7772f.DAI7v-GM.png",o="/blog/assets/d658fa4c22bab94a7975579900d01604.DzyL1a2x.png",r="/blog/assets/9979ae5d90c0971ff4b6616a678b843c.CSRKTQhw.png",m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"notion/JavaScript.md","filePath":"notion/JavaScript.md","lastUpdated":1753924404000}'),p={name:"notion/JavaScript.md"};function d(c,t,h,u,k,g){return s(),e("div",null,t[0]||(t[0]=[i('<h3 id="引擎解析流程" tabindex="-1">引擎解析流程 <a class="header-anchor" href="#引擎解析流程" aria-label="Permalink to &quot;引擎解析流程&quot;">​</a></h3><p><img src="'+n+'" alt="Untitled.png" loading="lazy"></p><p>这是 Microsoft Edge 浏览器的 JavaScript 引擎 ChakraCore 的结构。我们来看一看我们的 JavaScript 代码在引擎中会经历什么。</p><ul><li>JavaScript 文件会被下载下来。</li><li>然后进入 Parser，Parser 会把代码转化成 AST（抽象语法树）。</li><li>然后根据抽象语法树，Bytecode Compiler 字节码编译器会生成引擎能够直接阅读、执行的字节码。</li><li>字节码进入翻译器，将字节码一行一行的翻译成效率十分高的 Machine Code。</li></ul><blockquote><p>在项目运行的过程中，引擎会对执行次数较多的 function 记性优化，引擎将其代码编译成 Machine Code 后打包送到顶部的 Just-In-Time(JIT) Compiler，下次再执行这个 function，就会直接执行编译好的 Machine Code。但是由于 JavaScript 的动态变量，上一秒可能是 Array，下一秒就变成了 Object。那么上一次引擎所做的优化，就失去了作用，此时又要再一次进行优化。</p></blockquote><h3 id="window-loaction-vs-history-pushstate" tabindex="-1"><code>window.loaction</code> <strong>VS</strong> <code>history.pushState</code> <a class="header-anchor" href="#window-loaction-vs-history-pushstate" aria-label="Permalink to &quot;`window.loaction` **VS** `history.pushState`&quot;">​</a></h3><p><code>window.location</code></p><p><code>history.pushState(state, unused, url: optional)</code></p><details><summary>相同点</summary><p>修改hash都会产生历史记录</p></details><details><summary>pushState优势</summary> - 新的url可以是与当前url相同源的任何url，`window.location`只有修改hash时才会保持在相同的文档中 - 修改url是可选的（optional）, `window.location = &#39;#foo&#39;` 如果hash不是 ‘#foo’ 则会产生一条历史记录 - </details><blockquote><p>pushState永远不会触发hashChange事件，即使新的URL与旧的URL仅仅是hash不同； import/export、require/modules.exports</p></blockquote><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 疑问</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { a } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;module&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> module </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;module&#39;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">不同点，为什么import上不可以使用解构</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Equality_comparisons_and_sameness#%E7%9B%B8%E7%AD%89%E6%80%A7%E6%96%B9%E6%B3%95%E6%AF%94%E8%BE%83" target="_blank" rel="noreferrer"><strong>相等性方法比较</strong></a></p><p><img src="'+l+'" alt="Untitled.png" loading="lazy"></p><p><img src="'+o+'" alt="Untitled.png" loading="lazy"></p><p><img src="'+r+'" alt="Untitled.png" loading="lazy"></p><p><a href="https://links.jianshu.com/go?to=https%3A%2F%2Flink.juejin.cn%3Ftarget%3Dhttps%253A%252F%252Fblog.csdn.net%252Fwoshinidedege%252Farticle%252Fdetails%252F78659183%253FlocationNum%253D10%2526fps%253D1" target="_blank" rel="noreferrer">为什么</a><a href="https://links.jianshu.com/go?to=https%3A%2F%2Flink.juejin.cn%3Ftarget%3Dhttps%253A%252F%252Fblog.csdn.net%252Fwoshinidedege%252Farticle%252Fdetails%252F78659183%253FlocationNum%253D10%2526fps%253D1" target="_blank" rel="noreferrer"><code>typeof null</code></a><a href="https://links.jianshu.com/go?to=https%3A%2F%2Flink.juejin.cn%3Ftarget%3Dhttps%253A%252F%252Fblog.csdn.net%252Fwoshinidedege%252Farticle%252Fdetails%252F78659183%253FlocationNum%253D10%2526fps%253D1" target="_blank" rel="noreferrer">的结果是</a><a href="https://links.jianshu.com/go?to=https%3A%2F%2Flink.juejin.cn%3Ftarget%3Dhttps%253A%252F%252Fblog.csdn.net%252Fwoshinidedege%252Farticle%252Fdetails%252F78659183%253FlocationNum%253D10%2526fps%253D1" target="_blank" rel="noreferrer"><code>Object</code></a><a href="https://links.jianshu.com/go?to=https%3A%2F%2Flink.juejin.cn%3Ftarget%3Dhttps%253A%252F%252Fblog.csdn.net%252Fwoshinidedege%252Farticle%252Fdetails%252F78659183%253FlocationNum%253D10%2526fps%253D1" target="_blank" rel="noreferrer">?</a></p><p>简单来说，<code>typeof null</code>的结果为<code>Object</code>的原因是一个<code>bug</code>。在 <code>javascript</code> 的最初版本中，使用的 <code>32</code>位系统，<code>js</code>为了性能优化，使用低位来存储变量的类型信息。</p><table tabindex="0"><thead><tr><th>数据类型</th><th>机器码标识</th></tr></thead><tbody><tr><td>对象(Object)</td><td>000</td></tr><tr><td>整数</td><td>1</td></tr><tr><td>浮点数</td><td>010</td></tr><tr><td>字符串</td><td>100</td></tr><tr><td>布尔</td><td>110</td></tr><tr><td><code>undefined</code></td><td>-2^31(即全为1)</td></tr><tr><td><code>null</code></td><td>全为0</td></tr></tbody></table><p>在判断数据类型时，是根据机器码低位标识来判断的，而<code>null</code>的机器码标识为全<code>0</code>，而对象的机器码低位标识为<code>000</code>。所以<code>typeof null</code>的结果被误判为<code>Object</code>。</p><p>作者：六寸光阴丶</p><p>链接：<a href="https://www.jianshu.com/p/68c69bd329ee" target="_blank" rel="noreferrer">https://www.jianshu.com/p/68c69bd329ee</a></p><p>来源：简书</p><p>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><p>事件冒泡&amp;事件捕获</p><p><strong>事件的流向有三个阶段：捕获阶段，目标阶段，冒泡阶段。</strong></p><p>addEventListener函数用于事件绑定，他有三个参数↓</p><ol><li>eventType 事件类型（&quot;click之类的&quot;）</li><li>function 触发事件后所需要执行的函数</li><li>bool 入参true/false,决定事件在冒泡阶段执行还是捕获阶段执行。 true表示事件在捕获阶段执行，false表示事件在冒泡阶段执行。默认值是false。</li></ol><p>blur事件优先级大于click事件</p><p>我们知道JavaScript属于解释型语言，JavaScript的执行分为：解释和执行两个阶段,这两个阶段所做的事并不一样：</p><h3 id="解释阶段" tabindex="-1">解释阶段： <a class="header-anchor" href="#解释阶段" aria-label="Permalink to &quot;解释阶段：&quot;">​</a></h3><ul><li>词法分析</li><li>语法分析</li><li>作用域规则确定</li></ul><h3 id="执行阶段" tabindex="-1">执行阶段： <a class="header-anchor" href="#执行阶段" aria-label="Permalink to &quot;执行阶段：&quot;">​</a></h3><ul><li>创建执行上下文</li><li>执行函数代码</li><li>垃圾回收</li></ul>',34)]))}const F=a(p,[["render",d]]);export{m as __pageData,F as default};
