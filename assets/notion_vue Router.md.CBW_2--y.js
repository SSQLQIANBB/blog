import{_ as t,c as a,o as e,a as r}from"./app.DFncrubc.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"notion/vue Router.md","filePath":"notion/vue Router.md","lastUpdated":1754489639000}'),s={name:"notion/vue Router.md"};function n(h,o,i,l,c,d){return e(),a("div",null,o[0]||(o[0]=[r('<h2 id="原理" tabindex="-1">原理 <a class="header-anchor" href="#原理" aria-label="Permalink to &quot;原理&quot;">​</a></h2><p>要实现前端路由，需要解决两个核心：</p><ol><li>如何改变 URL 却不引起页面刷新？</li><li>如何检测 URL 变化了？</li></ol><p>下面分别使用 hash 和 history 两种实现方式回答上面的两个核心问题。</p><h3 id="hash-实现" tabindex="-1"><strong>hash 实现</strong> <a class="header-anchor" href="#hash-实现" aria-label="Permalink to &quot;**hash 实现**&quot;">​</a></h3><p>hash 是 URL 中 hash (#) 及后面的那部分，常用作锚点在页面内进行导航，<strong>改变 URL 中的 hash 部分不会引起页面刷新</strong></p><p>通过 hashchange 事件监听 URL 的变化，改变 URL 的方式只有这几种：</p><ol><li>通过浏览器前进后退改变 URL</li><li>通过<code>&lt;a&gt;</code>标签改变 URL</li><li>通过window.location改变URL</li></ol><h3 id="history-实现" tabindex="-1"><strong>history 实现</strong> <a class="header-anchor" href="#history-实现" aria-label="Permalink to &quot;**history 实现**&quot;">​</a></h3><p>history 提供了 pushState 和 replaceState 两个方法，<strong>这两个方法改变 URL 的 path 部分不会引起页面刷新</strong></p><p>history 提供类似 <code>/home</code>hashchange 事件的 popstate 事件，但 popstate 事件有些不同：</p><ol><li>通过浏览器前进后退改变 URL 时会触发 popstate 事件</li><li>通过pushState/replaceState或<code>&lt;a&gt;</code>标签改变 URL 不会触发 popstate 事件。</li><li>好在我们可以拦截 pushState/replaceState的调用和<code>&lt;a&gt;</code>标签的点击事件来检测 URL 变化</li><li>通过js 调用history的back，go，forward方法可触发该事件</li></ol><h2 id="重定向与别名" tabindex="-1">重定向与别名 <a class="header-anchor" href="#重定向与别名" aria-label="Permalink to &quot;重定向与别名&quot;">​</a></h2><p>重定向是指当用户访问 <code>/home</code> 时，URL 会被 <code>/</code> 替换，然后匹配成 <code>/</code>。那么什么是别名呢？</p><p><strong>将</strong> <strong><code>/</code></strong> <strong>别名为</strong> <strong><code>/home</code>****，意味着当用户访问</strong> <strong><code>/home</code></strong> <strong>时，URL 仍然是</strong> <strong><code>/home</code>****，但会被匹配为用户正在访问</strong> <strong><code>/</code></strong></p><h3 id="alias" tabindex="-1"><strong>alias</strong> <a class="header-anchor" href="#alias" aria-label="Permalink to &quot;**alias**&quot;">​</a></h3><p>通过别名，你可以自由地将 UI 结构映射到一个任意的 URL，而不受配置的嵌套结构的限制</p>',17)]))}const u=t(s,[["render",n]]);export{g as __pageData,u as default};
