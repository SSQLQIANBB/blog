import{_ as e,c as l,o as a,a as o}from"./app.E0oOaMZe.js";const i="/blog/assets/2f22e69bad07c3eed60996ae726bc524.BMophHlE.png",n="/blog/assets/abdcb766dabbd46dcaf6025cae9ab064.DJjU-YcI.png",b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"notion/vite.md","filePath":"notion/vite.md","lastUpdated":1754939627000}'),r={name:"notion/vite.md"};function s(p,t,d,c,u,h){return a(),l("div",null,t[0]||(t[0]=[o('<p>流程图：</p><p><img src="'+i+'" alt="Untitled.png" loading="lazy"></p><p>这个流程图主要涵盖了Vite在开发环境中的核心工作流程，包括启动服务器、解析请求、模块转换、发送模块到浏览器、文件监听与热更新以及构建生产环境代码等步骤。当然，实际的Vite实现可能包含更多的细节和优化措施，但这个流程图提供了一个基本的框架来理解Vite的工作原理。</p><blockquote><p>💡 <strong>vite为什么不在生产环境使用esbuild打包？</strong></p></blockquote><blockquote><p>我的理解是开发环境esbuild不需要处理css等资源文件，而是统一交给浏览器，而在生产环境，打包时esbuild无法很好的处理资源文件，以及压缩等操作，所以使用生态强大的rollup</p></blockquote><h3 id="具体解释" tabindex="-1">具体解释 <a class="header-anchor" href="#具体解释" aria-label="Permalink to &quot;具体解释&quot;">​</a></h3><ol><li><strong>开发环境</strong>： <ul><li>在开发环境中，Vite 使用 esbuild 进行快速的模块转换，而不需要处理复杂的资源文件。</li><li>浏览器直接请求 CSS 文件，Vite 不会对其进行打包和优化。</li></ul></li><li><strong>生产环境</strong>： <ul><li>在生产环境中，Vite 使用 Rollup 来处理所有资源文件，将它们打包并进行各种优化。</li><li>Rollup 的插件系统能够处理复杂的需求，如提取 CSS、压缩代码、代码拆分等。</li></ul></li></ol><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><ul><li><strong>开发环境</strong>：esbuild 速度快，配置简单，适合处理开发环境中的常见文件类型，提升开发体验。</li><li><strong>生产环境</strong>：Rollup 提供了更丰富的插件生态系统和更强的优化能力，适合处理复杂的生产构建需求，包括资源文件处理和代码优化。</li></ul><h2 id="参考文献" tabindex="-1">参考文献 <a class="header-anchor" href="#参考文献" aria-label="Permalink to &quot;参考文献&quot;">​</a></h2><p><a href="https://zhuanlan.zhihu.com/p/424842555" target="_blank" rel="noreferrer">https://zhuanlan.zhihu.com/p/424842555</a></p><p><img src="'+n+'" alt="Untitled.png" loading="lazy"></p>',12)]))}const g=e(r,[["render",s]]);export{b as __pageData,g as default};
